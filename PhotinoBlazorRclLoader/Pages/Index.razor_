@page "/"
@using System.IO
@using System.Reflection
@using Microsoft.AspNetCore.Components

@if (componentType is not null)
{
    <!-- componentParameters! は null でないと保証済みの場合に使用 -->
    <DynamicComponent Type="@componentType" Parameters="componentParameters!" />
}
else
{
    <p>適切なコンポーネントが見つかりませんでした。</p>
}

@code {
    // nullable 参照型として宣言
    private Type? componentType;
    private IDictionary<string, object>? componentParameters;
    private List<Type> availableComponents = new();

    protected override void OnInitialized()
    {
        try
        {
            // 実行ファイルと同じディレクトリに配置されたすべてのアセンブリをロード
            var baseDir = Path.Combine(AppContext.BaseDirectory, "RCL");
            var assemblies = Directory.EnumerateFiles(baseDir, "*.dll", SearchOption.AllDirectories)
                .Select(Assembly.LoadFrom)
                .ToList();
            assemblies.ForEach(asm => Console.WriteLine($"見つかったdll:{asm.FullName}"));
            // アセンブリから ComponentBase を継承する型を検索
            availableComponents = assemblies
                 .SelectMany(assembly => assembly.GetTypes())
                 .Where(type => typeof(ComponentBase).IsAssignableFrom(type) && !type.IsAbstract && type.Name != "_Imports").ToList();

            // 利用可能なコンポーネントが存在する場合、最初の型を選ぶ
            if (availableComponents.Any())
            {
                Console.WriteLine($"利用可能なコンポーネントが見つかりました。");
                componentType = availableComponents.FirstOrDefault();
                if (componentType != null)
                {
                    //各RCLディレクトリのサブディレクトリにあるアセットをロード
                    string? rclAssetDir = null;
                    try
                    {
                        string assemblyLocation = componentType.Assembly.Location;
                        string directoryName = Path.GetDirectoryName(assemblyLocation)!;
                        rclAssetDir = Path.Combine(directoryName, "resource");
                    }
                    catch (Exception ex)
                    {
                        Console.Error.WriteLine($"resourceディレクトリの取得に失敗しました: {ex.Message}");
                    }

                    componentParameters = new Dictionary<string, object>
                    {
                        { "Message", "Photino.Blazor で動的にロードされたコンポーネントです！" }
                    };

                    // コンポーネントのプロパティに値を設定
                    Console.WriteLine($"コンポーネント {componentType.FullName} をロードしました。");
                }
                else
                {
                    Console.Error.WriteLine("適切なコンポーネントが見つかりませんでした。");
                }
            }
            else
            {
                Console.Error.WriteLine("適切なコンポーネントが見つかりませんでした。");
            }
        }
        catch (Exception ex)
        {
            string errorMessage = $"コンポーネントの自動検出に失敗しました: {ex.Message}\nError: {ex.Message}\nStack Trace: {ex.StackTrace}";
            Console.Error.WriteLine(errorMessage);
            componentType = null;
            componentParameters = null;
        }
    }
}
